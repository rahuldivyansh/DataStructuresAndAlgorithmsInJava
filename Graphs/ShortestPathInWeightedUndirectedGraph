// User function Template for Java
class Pair{
    int node;
    int wt;
    Pair(int node, int wt){
        this.node = node;
        this.wt = wt;
    }
}
class Pair1{
    int distance;
    int node;

    Pair1(int dis, int node) {
        this.distance = dis;
        this.node = node;
    }
}
class Solution {
    public static List<Integer> shortestPath(int n, int m, int edges[][]) {
        
        // Firstly, make a graph.
        ArrayList<ArrayList<Pair>> adj = new ArrayList<>();
        for(int i = 0 ; i < n+1; i++){
            adj.add(new ArrayList<Pair>());
        }
        
        for(int i = 0; i < m; i++){
            int u = edges[i][0];
            int v = edges[i][1];
            int wt = edges[i][2];
            adj.get(u).add(new Pair(v, wt));
            adj.get(v).add(new Pair(u, wt));
        }
        
        // Create a priority queue to store the node, distance pairs.
        // The priority queue is ordered based on the distance value.
        PriorityQueue<Pair1> pq = new PriorityQueue<>((x, y) -> x.distance - y.distance);

        // Create an array to store the shortest distances.
        int V = n+1;
        int S = 1;
        int[] dist = new int[V];
        Arrays.fill(dist, Integer.MAX_VALUE);
        
        // Creating parent array and initializing every value with itself.
        int[] parent = new int[V];
        for(int i = 0; i < V; i++){
            parent[i] = i;
        }

        // Add source node to the priority queue and set its shortest distance to 0.
        pq.add(new Pair1(0, S));
        dist[S] = 0;

        while (!pq.isEmpty()) {
            // Extract the pair with the smallest distance from the priority queue.
            int dis = pq.peek().distance;
            int node = pq.peek().node;
            pq.remove();

            // Iterate through the neighbors of the current node.
            for (Pair neighbor : adj.get(node)) {
                int neighborNode = neighbor.node;
                int edgeWeight = neighbor.wt;

                // Calculate the new distance to the neighbor node.
                int newDistance = dist[node] + edgeWeight;

                // If the new distance is smaller than the current distance, update it.
                if (newDistance < dist[neighborNode]) {
                    dist[neighborNode] = newDistance;

                    // Add the neighbor node to the priority queue with the updated distance.
                    pq.add(new Pair1(dist[neighborNode], neighborNode));
                    
                    // Updating that neighborNode came from parent node.
                    parent[neighborNode] = node;
                }
            }
        }
        
        //Getting the list
        List<Integer> ans = new ArrayList<Integer>();
        
        // If the vertex n is unreachable from 1, return -1 in arraylist.
        if(dist[n] ==  Integer.MAX_VALUE){
            ans.add(-1);
            return ans;     
        }
        
        int node = n;
        while(parent[node] != node){
            ans.add(node);
            node = parent[node];
        }
        ans.add(S);
        
        // The arraylist is containing path in reversed order.
        Collections.reverse(ans);
        
        return ans;
    }
}