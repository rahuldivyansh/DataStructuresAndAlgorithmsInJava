//User function Template for Java

class Solution
{
    static int[] findOrder(int n, int m, ArrayList<ArrayList<Integer>> prerequisites) 
    {
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
      for(int i = 0; i < n; i++){
          adj.add(new ArrayList<>());
      }
      
       // Forming the adj list for graph out of prerequisites.
      for(int i = 0; i < m; i++){
          adj.get(prerequisites.get(i).get(1)).add(prerequisites.get(i).get(0));
      }
   
      // Indegree array for storing indegree's for vertices.
      int [] indeg = new int[n];
      for(int i = 0; i < n; i++){
          for(int neighbour: adj.get(i)){
              indeg[neighbour]++;
          }
      }
       
      // Adding vertices with zero indegree into the queue.
      Queue<Integer> q = new ArrayDeque<>();
      for(int i = 0; i < n; i++){
          if(indeg[i] == 0){
              q.add(i);
          }
      }
       
      // Creating topological ordering.
      int [] ans = new int [n];
      int idx = 0;
      while(!q.isEmpty()){
          int top = q.poll();
          ans[idx++] = top;
          for(int neighbour: adj.get(top)){
              if(--indeg[neighbour] == 0){
                  q.add(neighbour);
              }
          }
      }
       
       /* If the proper topological ordering gets created,  it means 
       that its size will be equal to number of tasks or (vertices)*/
       
      if(idx == n) return ans;
      else return new int[0];       // Returning empty array 
    }
}