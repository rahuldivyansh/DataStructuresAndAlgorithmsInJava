//User function Template for Java

class Solution
{
    private int [] topoSort(ArrayList <ArrayList<Integer>> adj, int V){
        // Calculating the indegree of nodes.
        int [] indeg = new int[V];
        for(int i = 0; i < V; i++){
            for(int neighbour: adj.get(i)){
                indeg[neighbour]++;
            }
        }
        
        // Adding vertices with zero in-degree to the queue.
        Queue<Integer> q = new ArrayDeque<Integer>();
        for(int i = 0; i < V; i++){
            if(indeg[i] == 0){
                q.add(i);
            }
        }
        
        int [] ans = new int[V];    // Real array to be returned.
        int i = 0;
        while(!q.isEmpty()){
            int top = q.poll();
            ans[i++] = top;     // Adding the removed element from queue into ans array.
            for(int neighbour: adj.get(top)){
                
                /* If the indegree of vertex after decrementing
                by 1 becomes zero, add the vertex to the queue. */
                
                if(--indeg[neighbour] == 0){        
                    q.add(neighbour);
                }
            }
        }
        return ans;
    }
    
    public String findOrder(String [] dict, int N, int K)
    {
        // Initializing arraylist for a graph
        ArrayList <ArrayList<Integer>> adj = new ArrayList <>();
        for(int i = 0; i < K; i++){
            adj.add(new ArrayList<Integer>());
        }
        
        // Create a graph out of the words
        for(int i = 0; i < N-1; i++){
            String s1 = dict[i];
            String s2 = dict[i+1];
            
            // We will check difference in characters till the smallest length.
            // if s1 = 'abc' and s2 = 'abdeg' we will check till 'abc'
            int min = Math.min(s1.length(), s2.length());
            for(int j = 0; j < min; j++){
                if(s1.charAt(j) != s2.charAt(j)){
                    /* if differentiating char in s1 is 'c' and 
                    in s2 is 'd' we place an edge from c to d in graph. */
                    
                    adj.get(s1.charAt(j) - 'a').add(s2.charAt(j) - 'a');  
                    break;
                }
            }
        }
        
        int V = adj.size();
        int [] ans = topoSort(adj, V);
        
        String finalAns = "";
        for(int elem : ans){
            finalAns += (char)(elem + (int)'a');
        }
        
        return finalAns;
    }
}

 