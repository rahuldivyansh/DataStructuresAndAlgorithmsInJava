class Pair{
    int first;
    int second;
    Pair(int first, int second){
        this.first = first;
        this.second = second;
    }
}

class Solution {
    
    // Function for bfs traversal.
    private static void bfs(int row, int col, int[][] vis, char[][] grid){
        
        Queue<Pair> q = new LinkedList<>();
        q.add(new Pair(row,col));
        vis[row][col] = 1;
        
        int n = grid.length;
        int m = grid[0].length;
        
        while(!q.isEmpty()){
            int thisRow = q.peek().first;
            int thisCol = q.peek().second;
            q.remove();
            
            int delIdx[][] = {{-1, 0}, {0, 1}, {1, 0}, {0, -1}};
            // We go the neighbours of removed element from queue to mark them visited.
            for(int i = 0; i < 4; i++){
                    
                    int neighbourRow = thisRow + delIdx[i][0];
                    int neighbourCol = thisCol + delIdx[i][1];
                    
                    // Check if the neighbour is 1 and not already visited, then mark it as visited and insert it into queue.
                    if((neighbourRow >= 0 && neighbourRow < n) && (neighbourCol >= 0 && neighbourCol < m) ){
                        if( grid[neighbourRow][neighbourCol] == '1' && vis[neighbourRow][neighbourCol] == 0){
                            vis[neighbourRow][neighbourCol] = 1;
                            q.add(new Pair(neighbourRow,neighbourCol));
                        }
                    }
                
            }
        }
    }
    
    // Function to find the number of islands.
    private static int numIslands(char[][] grid) {
        
        int rows = grid.length;
        int cols = grid[0].length;
        int count = 0;
        int vis[][] = new int[rows][cols];
        
        for(int row = 0; row < rows; row++){
            for(int col = 0; col < cols; col++){
                // check if the element is 1 and it is not already visited.
                if(grid[row][col] == '1' && vis[row][col] == 0){
                    bfs(row, col, vis, grid);
                    count++;
                }
            }
        }
        return count;
    }
    
    public List<Integer> numOfIslands(int rows, int cols, int[][] operators) {
        
        char [][] matrix = new char[rows][cols];
        
        for(int i = 0; i < rows; i++){
            for(int j = 0; j < cols; j++){
                matrix[i][j] = '0';
            }
        }
        
        List<Integer> ans = new ArrayList<Integer>();
        for(int[] elem: operators){
            int i = elem[0];
            int j = elem[1];
            
            matrix[i][j] = '1';
            int noOfIsland = numIslands(matrix);
            
            ans.add(noOfIsland);
        }
        
        return ans;
    }
    
}
