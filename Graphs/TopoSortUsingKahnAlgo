  // Using kahn's algo (BFS).
    
    static int[] topoSort(int V, ArrayList<ArrayList<Integer>> adj){
        
        
        // Calculating the indegree of nodes.
        int [] indeg = new int[V];
        for(int i = 0; i < V; i++){
            for(int neighbour: adj.get(i)){
                indeg[neighbour]++;
            }
        }
        
        // Adding vertices with zero in-degree to the queue.
        Queue<Integer> q = new ArrayDeque<Integer>();
        for(int i = 0; i < V; i++){
            if(indeg[i] == 0){
                q.add(i);
            }
        }
        
        int [] ans = new int[V];    // Real array to be returned.
        int i = 0;
        while(!q.isEmpty()){
            int top = q.poll();
            ans[i++] = top;     // Adding the removed element from queue into ans array.
            for(int neighbour: adj.get(top)){
                
                /* If the indegree of vertex after decrementing
                by 1 becomes zero, add the vertex to the queue. */
                
                if(--indeg[neighbour] == 0){        
                    q.add(neighbour);
                }
            }
        }
        
        
        return ans;
    }
    