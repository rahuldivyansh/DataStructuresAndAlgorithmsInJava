//Graph having unit distance
class Pair{
    int node;
    int dist;
    Pair(int node, int dist){
        this.node = node;
        this.dist = dist;
    }
}
class Solution {
    
    public int[] shortestPath(int[][] edges,int n,int m ,int src) {
        // Creation of undirected graph.
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
		
		for(int i = 0; i < n; i++){
		    adj.add(new ArrayList<Integer>());
		}
		
		for(int i = 0; i < m; i++){
		    int u = edges[i][0];
		    int v = edges[i][1];
		    adj.get(u).add(v);
		    adj.get(v).add(u);
		}
		
		// Distance array initially all infinity.
		int [] dist = new int[n];
		for(int i = 0; i < n; i++){
		    dist[i] = Integer.MAX_VALUE;
		}
		dist[src] = 0; // Distance of src from src is zero.
		
		Stack<Pair> st = new Stack<>();
		st.push(new Pair(src,0));
		
		while(!st.isEmpty()){
		    Pair top = st.peek();
		    st.pop();
            int newDist = top.dist + 1;
		    
		    for(int adjacent: adj.get(top.node)){
		        if(newDist < dist[adjacent]){
		            dist[adjacent] = newDist;
		            st.push(new Pair(adjacent, newDist));
		        }
		    }
		}

		for(int i = 0; i < n; i++){
		    if(dist[i] == Integer.MAX_VALUE)
		        dist[i] = -1;
		}
		return dist;
		
    }
}