/*Complete the function below*/


class Solution
{
    private static void dfs(int start, ArrayList<ArrayList<Integer>> adj, int [] vis, Stack<Integer> st){
        vis[start] = 1;
        for(int neighbour: adj.get(start)){
            if(vis[neighbour] == 0){
                dfs(neighbour, adj, vis, st);
            }
        }
        st.push(start);
        return;
    }
    
    //Function to return list containing vertices in Topological order. 
    static int[] topoSort(int V, ArrayList<ArrayList<Integer>> adj) 
    {
        Stack <Integer> st = new Stack<>();
        int vis [] = new int [V];
        for(int i = 0; i < V; i++){
            if(vis[i] == 0){
                dfs(i, adj, vis, st);
            }
        }
        
        // popping elements from stack so that topological order is achieved.
        int [] ans = new int[V];
        int idx = 0;
        while(!st.isEmpty()){
            int top = st.pop();
            ans[idx++] = top;
        }
        
        return ans;
    }
}
