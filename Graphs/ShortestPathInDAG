class Pair{
    int end;
    int dist;
    Pair(){}
    Pair(int end, int dist){
        this.end = end;
        this.dist = dist;
    }
}
//User function Template for Java
class Solution {

    private static void dfs(int start, ArrayList<ArrayList<Pair>> adj, int [] vis, Stack<Integer> st){
        vis[start] = 1;
        for(int i = 0; i < adj.get(start).size(); i++){
            int v = adj.get(start).get(i).end;
            if(vis[v] == 0){
                dfs(v, adj, vis, st);
            }
        }
        st.push(start);
        return;
    }
    
	public int[] shortestPath(int N,int M, int[][] edges) {
		// Creating a directed weighted graph out of edges.
		ArrayList<ArrayList<Pair>> adj = new ArrayList<>();
		
		for(int i = 0; i < N; i++){
		    adj.add(new ArrayList<Pair>());
		}
		
		for(int i = 0; i < M; i++){
		    Pair p = new Pair(edges[i][1], edges[i][2]);
		    adj.get(edges[i][0]).add(p);
		}
		
		// Finding out the toposort and filling the stack with it.
        Stack <Integer> st = new Stack<>();
        int vis [] = new int [N];
        for(int i = 0; i < N; i++){
            if(vis[i] == 0){
                dfs(i, adj, vis, st);
            }
        }
        
        // Creating distance array and assigning maxvalue to each index initially.
        int [] dist = new int[N];
        for(int i = 0; i < N; i++){
            // dist[i] = Integer.MAX_VALUE;
            dist[i] = (int)(1e9);
        }
        
        dist[0] = 0;
        while(!st.isEmpty()){
            int node = st.peek();
            st.pop();
            
            // Accessing the adjacent nodes of (node) that we got from top of stack.
            for(int i = 0; i < adj.get(node).size(); i++){
                int v = adj.get(node).get(i).end;
                int wt = adj.get(node).get(i).dist;
                
                // eg. dist[0] + wt(dist[adjacent node of 0]) < short value of v in dist array
                if(dist[node] + wt < dist[v]){
                    dist[v] = dist[node] + wt;
                }
            }
        }
        
        // Changing the values which are still 1e9 to -1
        for(int i = 0; i < N; i++){
            if(dist[i] == 1e9) 
                dist[i] = -1;
        }
        
        return dist;
	}
}